//: Playground - noun: a place where people can play

import UIKit



//Two Dimensional Arrays

//Write a function that takes a square 2-Dimensional array of Ints and rotates it 90 degrees

//Sample input:
let testArr = [[1,2,3],
                [4,5,6],
                [7,8,9]]

//Sample output:
let testArrOut = [[7,4,1],
                  [8,5,2],
                  [9,6,3]]

func rotate<T>(arr2d: [[T]]) -> [[T]] {
    var returnArr = [[T]]()
    for j in (0..<arr2d.count).reversed() {
        var tempArr = [T]()
        for i in (0..<arr2d.count).reversed() {
            tempArr.append(arr2d[i][j])
        }
    returnArr.append(tempArr)
    }
    return returnArr
}

//rotate(arr2d: testArr)

/*
func rotateArr2<T>(arr2d: [[T]]) -> [[T]] {
    let myCount = arr2d[0].count
    let nilArr = Array<T?>(repeating: nil, count: myCount)
    var returnArr = Array(repeating: nilArr, count: arr2d.count)
    for rowNumber in 0..<arr2d.count {
        for columnNumber in 0..<arr2d[0].count {
            returnArr[rowNumber][columnNumber] = arr2d[rowNumber][columnNumber]
        }
    }
    return returnArr
}
 */

func rotating90Degrees<T>(array: [[T]]) -> [[T]] {
    let reversedArray = Array(array.reversed())
    var returnedArr = Array(repeating: [T](), count: array[0].count)
    
    for arr in reversedArray {
        for (index, num) in arr.enumerated() {
            returnedArr[index].append(num)
        }
    }
    return returnedArr
}

//rotating90Degrees(array: testArr)
//******

func rotateArrAgain(arr2d: [[Int]]) {
    for i in 0..<arr2d[0].count {
            print("HEY \(arr2d[0][i])")
    }
    for j in 0..<arr2d[1].count {
        print("HEY \(arr2d[1][j])")
    }
    for k in 0..<arr2d[2].count {
        print("HEY \(arr2d[2][k])")
    }
}

//rotateArrAgain(arr2d: testArr)

//Bonus: Handle arrays that are not square

let testArr2 = [[1,2,3,4],
                [5,6,7,8]]

let testArr2Out = [[5,1],
                    [6,2],
                    [7,3],
                    [8,4]]


//Stacks

//Implement a Stack using an Array

class Stack<T> {
    private var arr = Array<T>()
    //var arr = [T]() //difference??
    
    func pop() {
        arr.removeLast()
    }
    
    func push(newElement: T) {
        arr.append(newElement)
    }
    
    func peek() -> T? {
        return arr[0]
    }
    
    func isEmpty() -> Bool {
        return arr.count > 0
    }
}


//Linked Lists

//Implement a singly linked list with the following methods

class Node<T> {
    var key: T!
    var next: Node?
    var head: Node?
}

class LinkedList<T: Equatable> {
    //instantiation of a Node class of type Generic
    private var head = Node<T>()
    
    func isEmpty() -> Bool {
        return head.key == nil
    }
    
    func append(newElement: T) {
        
    }
    
    func delete(at: Int){}
    func insert(at: Int){}
    var count: Int = 0
}


//Queues

//Implement a Queue using a Linked List.

class Queue {
    private var list = LinkedList()
    func enQueue(){}
    func deQueue(){}
    func peek(){}
    func isEmpty(){}
}


//Advanced:

//1) Write map, filter and reduce functions for your Stack, Queue and LinkedList


//2) Write a reverse() function for your Stack, Queue and LinkedList

//2b) Write a reverse() funciton for your LinkedList that works in O(1) space


//3) https://projecteuler.net/problem=2
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

//4) https://projecteuler.net/problem=7

/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
*/


